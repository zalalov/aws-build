# EC2 Instances Creation Task
---

# create proxy instance
- name: Create EC2 instance for proxy
  ec2:
    region: "{{ ec2_config.region }}"
    keypair: "{{ ec2_config.keypair }}"
    instance_type: "{{ ec2_config.instance_type }}"
    image: "{{ ec2_config.image }}"
    group_id: "{{ sg_proxy.group_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: "{{ ec2_config.volume_size }}"
        delete_on_termination: true
    count: 1
    wait: yes
    instance_tags:
      Name: "{{ ec2_config.instance_names.proxy }}"
  register: proxy_instance

# create admin app instance
- name: Create EC2 instance for admin app
  ec2:
    region: "{{ ec2_config.region }}"
    keypair: "{{ ec2_config.keypair }}"
    instance_type: "{{ ec2_config.instance_type }}"
    image: "{{ ec2_config.image }}"
    group_id: "{{ sg_admin.group_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: "{{ ec2_config.volume_size }}"
        delete_on_termination: true
    count: 1
    wait: yes
    instance_tags:
      Name: "{{ ec2_config.instance_names.admin }}"
  register: admin_instance

- set_fact:
    admin_private_ip: "{{ admin_instance.instances[0].private_ip }}"

# create blog app instance
- name: Create EC2 instance for blog app
  ec2:
    region: "{{ ec2_config.region }}"
    keypair: "{{ ec2_config.keypair }}"
    instance_type: "{{ ec2_config.instance_type }}"
    image: "{{ ec2_config.image }}"
    group_id: "{{ sg_blog.group_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: "{{ ec2_config.volume_size }}"
        delete_on_termination: true
    count: 1
    wait: yes
    instance_tags:
      Name: "{{ ec2_config.instance_names.blog }}"
  register: blog_instance

- set_fact:
    blog_private_ip: "{{ blog_instance.instances[0].private_ip }}"

# create redis instance
- name: Create EC2 instance for redis
  ec2:
    region: "{{ ec2_config.region }}"
    keypair: "{{ ec2_config.keypair }}"
    instance_type: "{{ ec2_config.instance_type }}"
    image: "{{ ec2_config.image }}"
    group_id: "{{ sg_redis.group_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: "{{ ec2_config.volume_size }}"
        delete_on_termination: true
    count: 1
    wait: yes
    instance_tags:
      Name: "{{ ec2_config.instance_names.redis }}"
  register: redis_instance

# create monitor instance
- name: Create EC2 instance for monitor service
  ec2:
    region: "{{ ec2_config.region }}"
    keypair: "{{ ec2_config.keypair }}"
    instance_type: "{{ ec2_config.instance_type }}"
    image: "{{ ec2_config.image }}"
    group_id: "{{ sg_monitor.group_id }}"
    volumes:
      - device_name: /dev/sda1
        volume_size: "{{ ec2_config.volume_size }}"
        delete_on_termination: true
    count: 1
    wait: yes
    instance_tags:
      Name: "{{ ec2_config.instance_names.monitor }}"
  register: monitor_instance

# wait for instances will be available
- name: Wait for proxy instance to listen on port 22
  wait_for:
    state: started
    host: "{{ proxy_instance.instances[0].public_dns_name }}"
    port: 22
  when: proxy_instance|changed
- name: Wait for admin instance to listen on port 22
  wait_for:
    state: started
    host: "{{ admin_instance.instances[0].public_dns_name }}"
    port: 22
  when: admin_instance|changed
- name: Wait for blog instance to listen on port 22
  wait_for:
    state: started
    host: "{{ blog_instance.instances[0].public_dns_name }}"
    port: 22
  when: blog_instance|changed
- name: Wait for redis instance to listen on port 22
  wait_for:
    state: started
    host: "{{ redis_instance.instances[0].public_dns_name }}"
    port: 22
  when: redis_instance|changed
- name: Wait for monitor server instance to listen on port 22
  wait_for:
    state: started
    host: "{{ monitor_instance.instances[0].public_dns_name }}"
    port: 22
  when: monitor_instance|changed